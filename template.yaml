AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Lambda User Management API with TypeScript and Sequelize (updated)

Globals:
  Function:
    Runtime: nodejs20.x
    Layers:
      - !Ref CommonLayer
      - !Ref SequelizeLayer
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        DATABASE_HOST: !Ref DatabaseHost
        DATABASE_PORT: !Ref DatabasePort
        DATABASE_NAME: !Ref DatabaseName
        DATABASE_USER: !Ref DatabaseUser
        DATABASE_PASSWORD: !Ref DatabasePassword
        JWT_SECRET: !Ref JWTSecret
        JWT_EXPIRES_IN: !Ref JWTExpiresIn
        SCHEMAS_PATH: "./schemas"
    Timeout: 30
    MemorySize: 256
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  DatabaseHost:
    Type: String
    Description: Database host
    Default: localhost
  
  DatabasePort:
    Type: String
    Description: Database port
    Default: "5432"
  
  DatabaseName:
    Type: String
    Description: Database name
    Default: lambda_dev
  
  DatabaseUser:
    Type: String
    Description: Database user
    Default: postgres
  
  DatabasePassword:
    Type: String
    Description: Database password
    NoEcho: true
    Default: postgres
  
  JWTSecret:
    Type: String
    Description: JWT secret key
    NoEcho: true
    Default: your-super-secret-jwt-key
  
  JWTExpiresIn:
    Type: String
    Description: JWT expiration time
    Default: "7d"

Resources:
  # Lambda Layers
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: lambda-user-management-common-layer
      Description: Common dependencies layer
      ContentUri: layers/common-layer/
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Retain

  SequelizeLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: lambda-user-management-sequelize-layer
      Description: Sequelize ORM dependencies layer
      ContentUri: layers/sequelize-layer/
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Retain

  LoginRequestModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref ServerlessRestApi
      ContentType: application/json
      Schema: !Transform
        Name: AWS::Include
        Parameters:
          Location: ./src/api-schemas/models/auth/login-request.json

  # API Gateway definition
  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      models:
        - name: LoginRequest
          schema: !Ref LoginRequestModel
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"


  # Auth Functions
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: auth-handler.register
      Events:
        RegisterApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessRestApi
            Path: /auth/register
            Method: POST

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: auth-handler.login
      Events:
        LoginApi:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessRestApi
            Path: /auth/login
            Method: POST

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'
  
  ApiId:
    Description: API Gateway ID
    Value: !Ref ServerlessRestApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiId'